generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Userdetals {
  id          Int      @id @default(autoincrement())
  ProfileLink String
  country     String
  email       String
  Province    String
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model USer {
  id           Int      @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String   @unique
  hashpassword String
  verified     Boolean  @default(false)
  role         Role     @default(Customer)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  PhoneNumber  String   @unique

  // Relations
  hotels        Hotel[]             @relation("UserHotels")
  bookings      Booking[]
  chats         Chat[]
  reports       BookingReport[]
  customerChats Chat[]              @relation("CustomerChats")
  adminChats    Chat[]              @relation("AdminChats")
  profile       Profile?
  notifications AdminNotification[]
  feedbacks     Feedback[]
}

enum Role {
  Admin
  Customer
}

model Profile {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  address      String
  profileImage String?
  country      String
  province     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         USer     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Hotel {
  id          Int             @id @default(autoincrement())
  adminId     Int
  name        String
  location    String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  admin       USer            @relation("UserHotels", fields: [adminId], references: [id], onDelete: Cascade)
  rooms       Room[]
  reports     BookingReport[]
  images      HotelImage[] // One-to-many relationship with HotelImages
}

model HotelImage {
  id      Int     @id @default(autoincrement())
  url     String // URL or path to the image
  caption String? // Optional image caption or description
  hotelId Int
  hotel   Hotel   @relation(fields: [hotelId], references: [id] , onDelete: Cascade) // Many-to-one relationship with Hotel
}

model Room {
  id                 Int       @id @default(autoincrement())
  hotelId            Int
  roomNumber         String
  type               String
  price              Float
  availabilityStatus Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  hotel              Hotel     @relation(fields: [hotelId], references: [id] , onDelete: Cascade) // Many-to-one relationship with Hotel
  bookings           Booking[]
}

model Booking {
  id           Int           @id @default(autoincrement())
  roomId       Int
  customerId   Int
  bookingDate  DateTime
  checkInDate  DateTime
  checkOutDate DateTime
  status       BookingStatus
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  room          Room           @relation(fields: [roomId], references: [id] , onDelete: Cascade)
  customer      USer           @relation(fields: [customerId], references: [id] , onDelete: Cascade)
  feedbacks     Feedback[]
  notifications Notification[]
}

enum BookingStatus {
  Booked
  Cancelled
}

model Chat {
  id         Int      @id @default(autoincrement())
  adminId    Int
  customerId Int
  message    String
  createdAt  DateTime @default(now())
  admin      USer     @relation("AdminChats", fields: [adminId], references: [id] , onDelete: Cascade)
  customer   USer     @relation("CustomerChats", fields: [customerId], references: [id] , onDelete: Cascade)
  User       USer?    @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId     Int?
}

model BookingReport {
  id            Int      @id @default(autoincrement())
  hotelId       Int
  reportDetails String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hotel         Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  User          USer?    @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId        Int?
}

model Notification {
  id                 Int                 @id @default(autoincrement())
  bookingId          Int
  message            String
  createdAt          DateTime            @default(now())
  // Each admin can mark the notification as viewed
  adminNotifications AdminNotification[]

  Booking Booking[]
}

model AdminNotification {
  id             Int          @id @default(autoincrement())
  adminId        Int
  notificationId Int
  viewed         Boolean      @default(false)
  notification   Notification @relation(fields: [notificationId], references: [id] , onDelete: Cascade)
  admin          USer         @relation(fields: [adminId], references: [id] , onDelete: Cascade)
}

model Feedback {
  id         Int      @id @default(autoincrement())
  bookingId  Int
  customerId Int
  rating     Int // Rating out of 5
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer USer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  booking  Booking @relation(fields: [bookingId], references: [id] , onDelete: Cascade)
}
